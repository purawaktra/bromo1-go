// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
  "openapi": "3.0.0",
  "info": {
    "description": "This is API documentation on DataBx Bromo1 Microservices",
    "version": "1.0.0",
    "title": "DataBx Bromo1 Microservices",
    "contact": {
      "email": "akbar.muhammadakbarmaulana@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "photo_profile",
      "description": "Simple interact with photo profile mongodb collection"
    }
  ],
  "paths": {
    "/select/profile_picture": {
      "post": {
        "tags": [
          "photo_profile"
        ],
        "summary": "Get photo profile by given document id",
        "description": "This should be return only one photo ya",
        "operationId": "RetrieveProfilePicture",
        "security": [
          {"basicAuth":  []}
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/xClientId"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PhotoProfile"
        },
        "responses": {
          "200": {
            "description": "RetrieveProfilePicture success, with given request",
            "content": {
              "application/bson": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Check request, body not comply with request rules",
            "content": {
              "application/bson": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401": {
            "description": "You are not permitted!"
          },
          "500": {
            "description": "General error, system cannot tell you what wrongs",
            "content": {
              "application/bson": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/insert/profile_picture": {
      "post": {
        "tags": [
          "photo_profile"
        ],
        "summary": "Store photo profile",
        "description": "Return only document profile",
        "operationId": "StoreProfilePicture",
        "security": [
          {"basicAuth":  []}
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/xClientId"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PhotoProfile"
        },
        "responses": {
          "200": {
            "description": "StoreProfilePicture success, with given request",
            "content": {
              "application/bson": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Check request, body not comply with request rules",
            "content": {
              "application/bson": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401": {
            "description": "You are not permitted!"
          },
          "500": {
            "description": "General error, system cannot tell you what wrongs",
            "content": {
              "application/bson": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/delete/profile_picture": {
      "post": {
        "tags": [
          "photo_profile"
        ],
        "summary": "Delete photo profile",
        "description": "Return if state whether success or not",
        "operationId": "RemoveProfilePicture",
        "security": [
          {"basicAuth":  []}
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/xClientId"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PhotoProfile"
        },
        "responses": {
          "200": {
            "description": "RemoveProfilePicture success, with given request",
            "content": {
              "application/bson": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Check request, body not comply with request rules",
            "content": {
              "application/bson": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401": {
            "description": "You are not permitted!"
          },
          "500": {
            "description": "General error, system cannot tell you what wrongs",
            "content": {
              "application/bson": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:7718/bromo1/api/v1"
    }
  ],
  "components": {
    "requestBodies": {
      "PhotoProfile": {
        "required": true,
        "content": {
          "application/bson": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      }
    },
    "schemas": {
      "RequestPhotoProfile": {
        "type": "string",
        "additionalProperties": false,
        "properties": {
          "request_id": {
            "type": "string",
            "maxLength": 36,
            "pattern": "[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}"
          },
          "data": {
            "type": "object",
            "properties": {
              "document_id": {
                "type": "string"
              },
              "account_id": {
                "type": "integer",
                "format": "uint"
              },
              "file" : {
                "type": "array",
                "items":
                {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        }
      },
      "ResponseSuccess": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "response_id": {
            "type": "string",
            "maxLength": 36,
            "pattern": "[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}"
          },
          "request_id": {
            "type": "string",
            "maxLength": 36,
            "pattern": "[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}"
          },
          "success": {
            "type": "boolean"
          },
          "response_time": {
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9]$"
          },
          "message": {
            "type": "string",
            "maxLength": 256,
            "pattern": "^.$"
          },
          "data": {
            "type": "object",
            "additionalProperties": true,
            "maxProperties": 64
          }
        }
      },
      "ResponseError": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "response_id": {
            "type": "string",
            "maxLength": 36,
            "pattern": "[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}"

          },
          "request_id": {
            "type": "string",
            "maxLength": 36,
            "pattern": "[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}"
          },
          "success": {
            "type": "boolean"
          },
          "response_time": {
            "type": "string",
            "maxLength": 64,
            "pattern": "^[0-9]$"
          },
          "error": {
            "type": "string",
            "maxLength": 256,
            "pattern": "^.$"
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "parameters": {
      "xClientId": {
        "name": "X-Client-ID",
        "in": "header",
        "description": "Custom Id that defines you as caller",
        "required": false,
        "schema": {
          "type": "string",
          "maxLength": 32,
          "pattern": "[A-Za-z0-9]{32}"
        }
      }
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
